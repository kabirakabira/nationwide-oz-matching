temp <- tracts.alabama[1:5,c(1,228,229,230,520)]
temp <- tracts.alabama[c(1,228,229,230,520),]
plot(temp)
plot(temp)[4]
plot(temp)[3]
plot(temp)
plot(temp[4])
temp <- tracts.alabama[c(2,232,241,655,1056),]
plot(temp[4])
plot(tracts.alabama)
plot(tracts.alabama[4])
plot(temp[4])
test[[1]]
test[[2]]
test[[3]]
class(test[[3]])
View(tracts.alabama)
View(test)
for (i in test[[1]]) { print(i)}
## Unit testing
tracts.alabama <- tracts.nationwide %>%
filter(substr(GEOID, 1,2) == "01")
test <- st_touches(tracts.alabama)
tracts.alabama$OZ_Neighbor = 0
for (i in 1:nrow(tracts.alabama)) {
if(tracts.alabama$Is_OZ[i] == 1) {
for (j in test[[i]]) {
tracts.alabama$OZ_Neighbor[j] = 1
}
}
}
plot(tracts.alabama[5])
plot(tracts.alabama[4])
View(tracts.alabama)
plot(tracts.alabama[6])
tracts.alabama$OZ_Neighbor <- ifelse(tracts.alabama$Is_OZ == 1, 2, tracts.alabama$OZ_Neighbor)
plot(tracts.alabama[6])
#! Setting up workspace
## Modifying options
options(scipen = 999)
options(timeout = 180)
## Installing and loading required packages
usePackage <- function(p) {
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
usePackage("dplyr")
usePackage("tidyr")
usePackage("tidycensus")
usePackage("tigris")
usePackage("sf")
usePackage("readxl")
usePackage("leaflet")
census_api_key(readLines("dependencies/censuskey.txt", warn = F))
## Read in Tract Limited Data
tracts.nationwide <- st_read("data/processed/Tracts_OZdesignation_LimitedData.shp")
## Unit testing
tracts.alabama <- tracts.nationwide %>%
filter(substr(GEOID, 1,2) == "01")
test <- st_touches(tracts.alabama)
View(test)
df.groups <- tracts.alabama[,]
df.groups <- tracts.alabama[0,0]
View(df.groups)
df.groups <- tracts.alabama[0,]
#! Setting up workspace
## Modifying options
options(scipen = 999)
options(timeout = 180)
## Installing and loading required packages
usePackage <- function(p) {
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
usePackage("dplyr")
usePackage("tidyr")
usePackage("tidycensus")
usePackage("tigris")
usePackage("sf")
usePackage("readxl")
usePackage("leaflet")
census_api_key(readLines("dependencies/censuskey.txt", warn = F))
## Read in Tract Limited Data
tracts.nationwide <- st_read("data/processed/Tracts_OZdesignation_LimitedData.shp")
## Unit testing
tracts.alabama <- tracts.nationwide %>%
filter(substr(GEOID, 1,2) == "01")
test <- st_touches(tracts.alabama)
df.groups <- tracts.alabama[0,]
for (i in 2:nrow(tracts.alabama)) {
if (tracts.alabama$Is_OZ == 1) {
row.nos <- c(i, test[[i]])
temp <- tracts.alabama[row.nos,]
temp <- temp %>%
mutate(group = tracts.alabama$GEOID[i])
df.groups <- df.groups %>% rbind(temp)
}
}
#! Setting up workspace
## Modifying options
options(scipen = 999)
options(timeout = 180)
## Installing and loading required packages
usePackage <- function(p) {
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
usePackage("dplyr")
usePackage("tidyr")
usePackage("tidycensus")
usePackage("tigris")
usePackage("sf")
usePackage("readxl")
usePackage("leaflet")
census_api_key(readLines("dependencies/censuskey.txt", warn = F))
## Read in Tract Limited Data
tracts.nationwide <- st_read("data/processed/Tracts_OZdesignation_LimitedData.shp")
## Unit testing
tracts.alabama <- tracts.nationwide %>%
filter(substr(GEOID, 1,2) == "01")
test <- st_touches(tracts.alabama)
df.groups <- tracts.alabama[0,]
for (i in 2:nrow(tracts.alabama)) {
if (tracts.alabama$Is_OZ[i] == 1) {
row.nos <- c(i, test[[i]])
temp <- tracts.alabama[row.nos,]
temp <- temp %>%
mutate(group = tracts.alabama$GEOID[i])
df.groups <- df.groups %>% rbind(temp)
}
}
tracts.alabama$OZ_Neighbor = 0
for (i in 1:nrow(tracts.alabama)) {
if(tracts.alabama$Is_OZ[i] == 1) {
for (j in test[[i]]) {
tracts.alabama$OZ_Neighbor[j] = 1
}
}
}
tracts.alabama$OZ_Neighbor <- ifelse(tracts.alabama$Is_OZ == 1, 2, tracts.alabama$OZ_Neighbor)
#! Setting up workspace
## Modifying options
options(scipen = 999)
options(timeout = 180)
## Installing and loading required packages
usePackage <- function(p) {
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
usePackage("dplyr")
usePackage("tidyr")
usePackage("tidycensus")
usePackage("tigris")
usePackage("sf")
usePackage("readxl")
usePackage("leaflet")
census_api_key(readLines("dependencies/censuskey.txt", warn = F))
## Read in Tract Limited Data
tracts.nationwide <- st_read("data/processed/Tracts_OZdesignation_LimitedData.shp")
## Unit testing
tracts.alabama <- tracts.nationwide %>%
filter(substr(GEOID, 1,2) == "01")
test <- st_touches(tracts.alabama)
df.groups <- tracts.alabama[0,]
for (i in 2:nrow(tracts.alabama)) {
if (tracts.alabama$Is_OZ[i] == 1) {
row.nos <- c(i, test[[i]])
temp <- tracts.alabama[row.nos,]
temp <- temp %>%
mutate(group = tracts.alabama$GEOID[i])
df.groups <- df.groups %>% rbind(temp)
}
}
#! Setting up workspace
## Modifying options
options(scipen = 999)
options(timeout = 180)
## Installing and loading required packages
usePackage <- function(p) {
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
usePackage("dplyr")
usePackage("tidyr")
usePackage("tidycensus")
usePackage("tigris")
usePackage("sf")
usePackage("readxl")
usePackage("leaflet")
census_api_key(readLines("dependencies/censuskey.txt", warn = F))
## Read in Tract Limited Data
tracts.nationwide <- st_read("data/processed/Tracts_OZdesignation_LimitedData.shp")
## Unit testing
tracts.alabama <- tracts.nationwide %>%
filter(substr(GEOID, 1,2) == "01")
test <- st_touches(tracts.alabama)
df.groups <- tracts.alabama[0,]
for (i in 1:nrow(tracts.alabama)) {
if (tracts.alabama$Is_OZ[i] == 1) {
row.nos <- c(i, test[[i]])
temp <- tracts.alabama[row.nos,]
temp <- temp %>%
mutate(group = tracts.alabama$GEOID[i])
df.groups <- df.groups %>% rbind(temp)
}
}
View(tracts.alabama)
View(df.groups)
plot(df.groups[4])
gc()
.rs.restartR()
gc()
#! Setting up workspace
## Modifying options
options(scipen = 999)
options(timeout = 180)
## Installing and loading required packages
usePackage <- function(p) {
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
usePackage("dplyr")
usePackage("tidyr")
usePackage("tidycensus")
usePackage("tigris")
usePackage("sf")
usePackage("readxl")
usePackage("leaflet")
census_api_key(readLines("dependencies/censuskey.txt", warn = F))
## Read in Tract Limited Data
tracts.nationwide <- st_read("data/processed/Tracts_OZdesignation_LimitedData.shp")
## Unit testing
tracts.alabama <- tracts.nationwide
test <- st_touches(tracts.alabama)
df.groups <- tracts.alabama[0,]
for (i in 1:nrow(tracts.alabama)) {
if (tracts.alabama$Is_OZ[i] == 1) {
row.nos <- c(i, test[[i]])
temp <- tracts.alabama[row.nos,]
temp <- temp %>%
mutate(group = tracts.alabama$GEOID[i])
df.groups <- df.groups %>% rbind(temp)
}
}
plot(df.groups[5])
.rs.restartR()
gc()
.rs.restartR()
gc()
#! Setting up workspace
## Modifying options
options(scipen = 999)
options(timeout = 180)
## Installing and loading required packages
usePackage <- function(p) {
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
usePackage("dplyr")
usePackage("tidyr")
usePackage("tidycensus")
usePackage("tigris")
usePackage("sf")
usePackage("readxl")
usePackage("leaflet")
census_api_key(readLines("dependencies/censuskey.txt", warn = F))
## Read in Tract Limited Data
tracts.nationwide <- st_read("data/processed/Tracts_OZdesignation_LimitedData.shp")
## Find neighbors for each OZ
time1 <- Sys.time()
oz.neighbors <- st_touches(tracts.nationwide)
neighbor.groups <- tracts.nationwide[0,]
for (i in 1:nrow(tracts.nationwide)) {
if (tracts.nationwide$Is_OZ[i] == 1) {
row.nos <- c(i, test[[i]])
temp <- tracts.nationwide[row.nos,]
temp <- temp %>%
mutate(group = tracts.nationwide$GEOID[i])
neighbor.groups <- neighbor.groups %>% rbind(temp)
}
}
gc()
.rs.restartR()
gc()
#! Setting up workspace
## Modifying options
options(scipen = 999)
options(timeout = 180)
## Installing and loading required packages
usePackage <- function(p) {
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
usePackage("dplyr")
usePackage("tidyr")
usePackage("tidycensus")
usePackage("tigris")
usePackage("sf")
usePackage("readxl")
usePackage("leaflet")
census_api_key(readLines("dependencies/censuskey.txt", warn = F))
## Read in Tract Limited Data
tracts.nationwide <- st_read("data/processed/Tracts_OZdesignation_LimitedData.shp")
## Find neighbors for each OZ
time1 <- Sys.time()
oz.neighbors <- st_touches(tracts.nationwide)
neighbor.groups <- tracts.nationwide[0,]
for (i in 1:nrow(tracts.nationwide)) {
if (tracts.nationwide$Is_OZ[i] == 1) {
row.nos <- c(i, oz.neighbors[[i]])
temp <- tracts.nationwide[row.nos,]
temp <- temp %>%
mutate(group = tracts.nationwide$GEOID[i])
neighbor.groups <- neighbor.groups %>% rbind(temp)
}
}
time2 <- Sys.time() - time1
time2
View(neighbor.groups)
View(neighbor.groups)
#! Setting up workspace
## Modifying options
options(scipen = 999)
options(timeout = 180)
options(tigris_use_cache = TRUE)
## Installing and loading required packages
usePackage <- function(p) {
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
usePackage("dplyr")
usePackage("tidyr")
usePackage("tidycensus")
usePackage("tigris")
usePackage("sf")
usePackage("readxl")
census_api_key(readLines("dependencies/censuskey.txt", warn = F))
## Folder structure
unlink("data/", recursive = TRUE)
dir.create("data")
dir.create("data/raw")
dir.create("data/processed")
dir.create("data/output")
## Download list of census tracts in OZs
download.file("https://www.cdfifund.gov/sites/cdfi/files/documents/designated-qozs.12.14.18.xlsx",
destfile = "data/raw/OZ_Tracts.xlsx")
## Get data on all census tracts nationwide
state.list <- c(
"AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC",
"FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY",
"LA", "ME", "MT", "NE", "NV", "NH", "NJ", "NM", "NY",
"NC", "ND", "OH", "OK", "OR", "MD", "MA", "MI", "MN",
"MS", "MO", "PA", "RI", "SC", "SD", "TN", "TX", "UT",
"VT", "VA", "WA", "WV", "WI", "WY"
)
tracts.nationwide <- get_acs(
geography = "tract",
state = state.list[1],
year = 2015,
survey = "acs5",
variables = "B01001_001E",
geometry = TRUE
) %>%
select(GEOID, geometry)
for (i in 2:length(state.list)) {
temp <- get_acs(
geography = "tract",
state = state.list[i],
year = 2015,
survey = "acs5",
variables = "B01001_001E",
geometry = TRUE
) %>%
select(GEOID, geometry)
tracts.nationwide <- tracts.nationwide %>%
rbind(temp)
}
View(tracts.nationwide)
### Read in and add OZ designation
oz.designations <- read.csv("dependencies/OZ_Tracts.csv",
colClasses = c("character", "character", "character"))
tracts.nationwide <- tracts.nationwide %>%
mutate(
Is_OZ = ifelse(GEOID %in% oz.designations$GEOID, 1, 0)
)
### Write out
st_write(tracts.nationwide,
"data/processed/Tracts_OZdesignation.shp")
View(oz.neighbors)
View(neighbor.groups)
View(neighbor.groups)
.rs.restartR()
gc()
#! Setting up workspace
## Modifying options
options(scipen = 999)
options(timeout = 180)
options(tigris_use_cache = TRUE)
## Installing and loading required packages
usePackage <- function(p) {
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
usePackage("dplyr")
usePackage("tidyr")
usePackage("tidycensus")
usePackage("tigris")
usePackage("sf")
usePackage("readxl")
census_api_key(readLines("dependencies/censuskey.txt", warn = F))
## Folder structure
unlink("data/", recursive = TRUE)
dir.create("data")
dir.create("data/raw")
dir.create("data/processed")
dir.create("data/output")
## Download list of census tracts in OZs
download.file("https://www.cdfifund.gov/sites/cdfi/files/documents/designated-qozs.12.14.18.xlsx",
destfile = "data/raw/OZ_Tracts.xlsx")
## Get data on all census tracts nationwide
state.list <- c(
"AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC",
"FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY",
"LA", "ME", "MT", "NE", "NV", "NH", "NJ", "NM", "NY",
"NC", "ND", "OH", "OK", "OR", "MD", "MA", "MI", "MN",
"MS", "MO", "PA", "RI", "SC", "SD", "TN", "TX", "UT",
"VT", "VA", "WA", "WV", "WI", "WY"
)
tracts.nationwide <- get_acs(
geography = "tract",
state = state.list[1],
year = 2015,
survey = "acs5",
variables = "B01001_001E",
geometry = TRUE
) %>%
select(GEOID, geometry)
for (i in 2:length(state.list)) {
temp <- get_acs(
geography = "tract",
state = state.list[i],
year = 2015,
survey = "acs5",
variables = "B01001_001E",
geometry = TRUE
) %>%
select(GEOID, geometry)
tracts.nationwide <- tracts.nationwide %>%
rbind(temp)
}
BACKUP <- tracts.nationwide
### Read in and add OZ designation
oz.designations <- read.csv("dependencies/OZ_Tracts.csv",
colClasses = c("character", "character", "character"))
tracts.nationwide <- tracts.nationwide %>%
mutate(
Is_OZ = ifelse(GEOID %in% oz.designations$GEOID, 1, 0)
)
### Write out
st_write(tracts.nationwide,
"data/processed/Tracts_OZdesignation.shp")
st_crs(tracts.nationwide)
#! Setting up workspace
## Modifying options
options(scipen = 999)
options(timeout = 180)
## Installing and loading required packages
usePackage <- function(p) {
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
usePackage("dplyr")
usePackage("tidyr")
usePackage("tidycensus")
usePackage("tigris")
usePackage("sf")
usePackage("readxl")
usePackage("leaflet")
census_api_key(readLines("dependencies/censuskey.txt", warn = F))
## Read in Tract Limited Data
tracts.nationwide <- st_read("data/processed/Tracts_OZdesignation.shp")
## Find neighbors for each OZ
time1 <- Sys.time()
oz.neighbors <- st_touches(tracts.nationwide)
neighbor.groups <- tracts.nationwide[0,]
for (i in 1:nrow(tracts.nationwide)) {
if (tracts.nationwide$Is_OZ[i] == 1) {
row.nos <- c(i, oz.neighbors[[i]])
temp <- tracts.nationwide[row.nos,]
temp <- temp %>%
mutate(Group_byOZ = tracts.nationwide$GEOID[i])
neighbor.groups <- neighbor.groups %>% rbind(temp)
}
}
time2 <- Sys.time() - time1
## Write out neighbor list (as csv), don't need SF now that we have computed neighbors
write.csv(neighbor.groups %>% st_drop_geometry(),
"data/processed/OZ_TractNeighbors.csv",
row.names = F)
time2
View(neighbor.groups)
